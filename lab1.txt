Lab 1, Loïs Bilat (loibi806), Johannes Scherm (johsc567)


Question 1 : List all employees, i.e. all tuples in the jbemployee relation.
mysql> SELECT * FROM jbemployee; 
+------+--------------------+--------+---------+-----------+-----------+ 
| id   | name               | salary | manager | birthyear | startyear |
+------+--------------------+--------+---------+-----------+-----------+
|   10 | Ross, Stanley      |  15908 |     199 |      1927 |      1945 |
|   11 | Ross, Stuart       |  12067 |    NULL |      1931 |      1932 | 
|   13 | Edwards, Peter     |   9000 |     199 |      1928 |      1958 |
|   26 | Thompson, Bob      |  13000 |     199 |      1930 |      1970 |
|   32 | Smythe, Carol      |   9050 |     199 |      1929 |      1967 |
|   33 | Hayes, Evelyn      |  10100 |     199 |      1931 |      1963 |
|   35 | Evans, Michael     |   5000 |      32 |      1952 |      1974 |
|   37 | Raveen, Lemont     |  11985 |      26 |      1950 |      1974 |
|   55 | James, Mary        |  12000 |     199 |      1920 |      1969 |
|   98 | Williams, Judy     |   9000 |     199 |      1935 |      1969 |
|  129 | Thomas, Tom        |  10000 |     199 |      1941 |      1962 |
|  157 | Jones, Tim         |  12000 |     199 |      1940 |      1960 |
|  199 | Bullock, J.D.      |  27000 |    NULL |      1920 |      1920 | 
|  215 | Collins, Joanne    |   7000 |      10 |      1950 |      1971 |  
|  430 | Brunet, Paul C.    |  17674 |     129 |      1938 |      1959 |
|  843 | Schmidt, Herman    |  11204 |      26 |      1936 |      1956 | 
|  994 | Iwano, Masahiro    |  15641 |     129 |      1944 |      1970 |
| 1110 | Smith, Paul        |   6000 |      33 |      1952 |      1973 |
| 1330 | Onstad, Richard    |   8779 |      13 |      1952 |      1971 | 
| 1523 | Zugnoni, Arthur A. |  19868 |     129 |      1928 |      1949 |
| 1639 | Choy, Wanda        |  11160 |      55 |      1947 |      1970 | 
| 2398 | Wallace, Maggie J. |   7880 |      26 |      1940 |      1959 |
| 4901 | Bailey, Chas M.    |   8377 |      32 |      1956 |      1975 | 
| 5119 | Bono, Sonny        |  13621 |      55 |      1939 |      1963 |
| 5219 | Schwarz, Jason B.  |  13374 |      33 |      1944 |      1959 | 
+------+--------------------+--------+---------+-----------+-----------+
25 rows in set (0.00 sec)


Question 2 : List the name of all departments in alphabetical order.
mysql> SELECT name FROM jbdept ORDER BY name ASC;
+------------------+
| name             |
+------------------+
| Bargain          |
| Book             |
| Candy            |
| Children's       |
| Children's       |
| Furniture        |
| Giftwrap         |
| Jewelry          |
| Junior Miss      |
| Junior's         |
| Linens           |
| Major Appliances |
| Men's            |
| Sportswear       |
| Stationary       |
| Toys             |
| Women's          |
| Women's          |
| Women's          |
+------------------+
19 rows in set (0.01 sec)


Question 3 : What parts are not in store, i.e. qoh = 0? (qoh = Quantity On Hand).
mysql> SELECT * FROM jbparts WHERE qoh = 0;
+----+-------------------+-------+--------+------+
| id | name              | color | weight | qoh  |
+----+-------------------+-------+--------+------+
| 11 | card reader       | gray  |    327 |    0 |
| 12 | card punch        | gray  |    427 |    0 |
| 13 | paper tape reader | black |    107 |    0 |
| 14 | paper tape punch  | black |    147 |    0 |
+----+-------------------+-------+--------+------+
4 rows in set (0.00 sec)


Question 4 : Which employees have a salary between 9000 (included) and 10000 (included) ?
mysql> SELECT * FROM jbemployee WHERE salary >= 9000 AND salary <= 10000;
+-----+----------------+--------+---------+-----------+-----------+
| id  | name           | salary | manager | birthyear | startyear |
+-----+----------------+--------+---------+-----------+-----------+
|  13 | Edwards, Peter |   9000 |     199 |      1928 |      1958 |
|  32 | Smythe, Carol  |   9050 |     199 |      1929 |      1967 |
|  98 | Williams, Judy |   9000 |     199 |      1935 |      1969 |
| 129 | Thomas, Tom    |  10000 |     199 |      1941 |      1962 |
+-----+----------------+--------+---------+-----------+-----------+
4 rows in set (0.00 sec)


Question 5 : What was the age of each employee when they started working (startyear) ? 
mysql> SELECT name, startyear-birthyear as 'age' FROM jbemployee; 
+--------------------+-----+
| name               | age |
+--------------------+-----+
| Ross, Stanley      |  18 |
| Ross, Stuart       |   1 |
| Edwards, Peter     |  30 |
| Thompson, Bob      |  40 |
| Smythe, Carol      |  38 |
| Hayes, Evelyn      |  32 |
| Evans, Michael     |  22 |
| Raveen, Lemont     |  24 |
| James, Mary        |  49 |
| Williams, Judy     |  34 |
| Thomas, Tom        |  21 |
| Jones, Tim         |  20 |
| Bullock, J.D.      |   0 |
| Collins, Joanne    |  21 |
| Brunet, Paul C.    |  21 |
| Schmidt, Herman    |  20 |
| Iwano, Masahiro    |  26 |
| Smith, Paul        |  21 |
| Onstad, Richard    |  19 |
| Zugnoni, Arthur A. |  21 |
| Choy, Wanda        |  23 |
| Wallace, Maggie J. |  19 |
| Bailey, Chas M.    |  19 |
| Bono, Sonny        |  24 |
| Schwarz, Jason B.  |  15 |
+--------------------+-----+
25 rows in set (0.01 sec)




Question 6 : Which employees have a last name ending with “son”? :
mysql> SELECT * FROM jbemployee WHERE name LIKE '%son,%';
+----+---------------+--------+---------+-----------+-----------+
| id | name          | salary | manager | birthyear | startyear |
+----+---------------+--------+---------+-----------+-----------+
| 26 | Thompson, Bob |  13000 |     199 |      1930 |      1970 |
+----+---------------+--------+---------+-----------+-----------+
1 row in set (0.00 sec)


Question 7 : Which items (note items, not parts) have been delivered by a supplier called Fisher-Price ? 
Formulate this query using a subquery in the where-clause.
mysql> SELECT * FROM jbitem WHERE supplier IN 
   -> (SELECT id FROM jbsupplier WHERE name = 'Fisher-Price');
+-----+-----------------+------+-------+------+----------+
| id  | name            | dept | price | qoh  | supplier |
+-----+-----------------+------+-------+------+----------+
|  43 | Maze            |   49 |   325 |  200 |       89 |
| 107 | The 'Feel' Book |   35 |   225 |  225 |       89 |
| 119 | Squeeze Ball    |   49 |   250 |  400 |       89 |
+-----+-----------------+------+-------+------+----------+
3 rows in set (0.00 sec)


Question 8 :  Formulate the same query as above, but without a subquery. 
mysql> SELECT I.id, I. name, I.dept, I.price, I.qoh, I.supplier 
    -> FROM jbitem I, jbsupplier S WHERE I.supplier = S.id AND S.name = 'Fisher-Price';
+-----+-----------------+------+-------+------+----------+
| id  | name            | dept | price | qoh  | supplier |
+-----+-----------------+------+-------+------+----------+
|  43 | Maze            |   49 |   325 |  200 |       89 |
| 107 | The 'Feel' Book |   35 |   225 |  225 |       89 |
| 119 | Squeeze Ball    |   49 |   250 |  400 |       89 |
+-----+-----------------+------+-------+------+----------+
3 rows in set (0.00 sec)


Question 9 : Show all cities that have suppliers located in them. 
Formulate this query using a subquery in the where-clause.


mysql> SELECT * FROM jbcity WHERE id IN 
   -> (SELECT city FROM jbsupplier);
+-----+----------------+-------+
| id  | name           | state |
+-----+----------------+-------+
|  10 | Amherst        | Mass  |
|  21 | Boston         | Mass  |
| 100 | New York       | NY    |
| 106 | White Plains   | Neb   |
| 118 | Hickville      | Okla  |
| 303 | Atlanta        | Ga    |
| 537 | Madison        | Wisc  |
| 609 | Paxton         | Ill   |
| 752 | Dallas         | Tex   |
| 802 | Denver         | Colo  |
| 841 | Salt Lake City | Utah  |
| 900 | Los Angeles    | Calif |
| 921 | San Diego      | Calif |
| 941 | San Francisco  | Calif |
| 981 | Seattle        | Wash  |
+-----+----------------+-------+
15 rows in set (0.00 sec)


Question 10 : What is the name and color of the parts that are heavier than a card reader ? 
Formulate this query using a subquery in the where-clause. (The SQL query must not contain the weight as a constant.) 


mysql> SELECT name, color FROM jbparts WHERE weight > 
   -> (SELECT weight FROM jbparts WHERE name = 'card reader');
+--------------+--------+
| name         | color  |
+--------------+--------+
| disk drive   | black  |
| tape drive   | black  |
| line printer | yellow |
| card punch   | gray   |
+--------------+--------+
4 rows in set (0.00 sec)


Question 11 : Formulate the same query as above, but without a subquery. 
(The query must not contain the weight as a constant.) 
mysql> SELECT P.name, P.color FROM jbparts P, jbparts Q 
    -> WHERE Q.name = 'card reader' AND P.weight > Q.weight;
+--------------+--------+
| name         | color  |
+--------------+--------+
| disk drive   | black  |
| tape drive   | black  |
| line printer | yellow |
| card punch   | gray   |
+--------------+--------+
4 rows in set (0.00 sec)


Question 12 : What is the average weight of black parts?
mysql> SELECT AVG(weight) as 'Average black parts' FROM jbparts WHERE color = 'black';
+---------------------+
| Average black parts |
+---------------------+
|            347.2500 |
+---------------------+
1 row in set (0.00 sec)


Question 13 : What is the total weight of all parts that each supplier in Massachusetts (“Mass”) has delivered? 
Retrieve the name and the total weight for each of these suppliers. 
mysql> SELECT S.name , SUM(weight*qoh) AS 'Total Weight' 
    -> FROM jbparts P, jbsupply Y, jbsupplier S, jbcity C 
    -> WHERE C.state = 'Mass' AND C.id = S.city AND S.id = Y.supplier AND Y.part = P.id
    -> GROUP BY S.name; 
+--------------+--------------+
| name         | Total Weight |
+--------------+--------------+
| DEC          |         4470 |
| Fisher-Price |         3170 |
+--------------+--------------+
2 rows in set (0.01 sec)


Question 14 : Create a new relation (a table), with the same attributes as the table items using
the CREATE TABLE syntax where you define every attribute explicitly (i.e. not
as a copy of another table). Then fill the table with all items that cost less than the
average price for items. Remember to define primary and foreign keys in your table!
mysql> CREATE TABLE jbitemscopy (
    -> id INT,
    ->     name VARCHAR(20),
    ->     dept INT NOT NULL,
    ->     price INT,
    ->     qoh INT UNSIGNED,
    ->     supplier INT NOT NULL,
    ->     CONSTRAINT pk_item PRIMARY KEY(id),
    ->     CONSTRAINT fk_item_dept FOREIGN KEY (dept) REFERENCES jbdept(id),
    ->            CONSTRAINT fk_item_supplier FOREIGN KEY (supplier) REFERENCES jbsupplier(id)
    ->
    -> );
    -> INSERT INTO jbitemscopy (
    ->    SELECT * FROM jbitem WHERE price < (SELECT AVG(price) FROM jbitem)
    -> );


Question 15 : Create a view that contains the items that cost less than the average price for items. 
mysql> CREATE VIEW jbviewcheapitems AS SELECT * FROM jbitem WHERE price < (SELECT AVG(price) FROM jbitem);


Question 16 : A table contains some data inside of it. A view is just a "window" to a table, another way to see the same table. 
If you modify a table, only the table will be modified, whereas when you modifiy a view, the table the view is pointing to 
will be modified at the same time as the view itself.


THe view is dynamic because it evolves with the table it is based on. The table is static because it doesn't change when we change other tables.


Question 17 : Create a view, using only the implicit join notation, i.e. only use where statements but no inner join, right join or left join statements, 
that calculates the total cost of each debit, by considering price and quantity of each bought item. (To be used for charging customer accounts). 
The view should contain the sale identifier (debit) and total cost.  
mysql> SELECT S.debit, I.price*S.quantity AS 'cost' FROM jbdebit D, jbsale S, jbitem I 
    -> WHERE D.id = S.debit AND S.item = I.id;
= I.id;
+--------+-------+
| debit  |  cost |
+--------+-------+
| 100586 |   396 |
| 100586 | 13050 |
| 100593 |   430 |
| 100592 |   650 |
| 100581 |  1250 |
| 100581 |   800 |
| 100594 |  3295 |
| 100582 |  1000 |
+--------+-------+
8 rows in set (0.01 sec)


Question 18 : 


mysql> SELECT S.debit, I.price*S.quantity AS 'cost' FROM jbdebit D INNER JOIN jbsale S INNER JOIN jbitem I
    -> ON D.id = S.debit AND S.item = I.id;
+--------+-------+
| debit  | cost  |
+--------+-------+
| 100586 |   396 |
| 100586 | 13050 |
| 100593 |   430 |
| 100592 |   650 |
| 100581 |  1250 |
| 100581 |   800 |
| 100594 |  3295 |
| 100582 |  1000 |
+--------+-------+
8 rows in set (0.00 sec)


We use an inner join because we don't want to have row appearing for each row of jbsale and jbitem, 
we only want those that are in the jbdebit column. With an outer join, rows for jbsale and 
jbitem would be added with a NULL debit.


Question 19 : Remove all suppliers in Los Angeles from the table jbsupplier. This will not work right away 
(you will receive error code 23000) which you will have to solve by deleting some other related tuples.
a)
mysql> DELETE FROM jbsale WHERE item IN (SELECT id FROM jbitem WHERE supplier IN (SELECT id FROM jbsupplier WHERE city IN (SELECT id FROM jbcity WHERE name = 'Los Angeles')));
mysql> DELETE FROM jbitem WHERE supplier IN (SELECT id FROM jbsupplier WHERE city in (SELECT id FROM jbcity WHERE name = 'Los Angeles'));
mysql> DELETE FROM jbitemscopy WHERE supplier IN (SELECT id FROM jbsupplier WHERE city in (SELECT id FROM jbcity WHERE name = 'Los Angeles'));
mysql> DELETE FROM jbsupplier WHERE city IN (SELECT id FROM jbcity WHERE name = 'Los Angeles');
b)
We started we the last command (DELETE FROM jbsupplier). We had an error telling us that some data in jbitem and jbitemscopy was dependant of what we wanted to remove from jbsupplier. So we tried to delete this data, using the last command as a subquerry to select the items to remove from jbitem and jbitemscopy. We had another error, this time with jbsale, so we did the same thing, we used the (DELETE FROM jbitem) as a subquerry for (DELETE FROM jbsale).
Question 20 : 
mysql> create view jbsale_supply(supplier, item, quantity) as
    -> select jbsupplier.name, jbitem.name, jbsale.quantity
    -> from jbsupplier inner join jbitem on jbsupplier.id = jbitem.supplier
    -> left join jbsale on jbsale.item = jbitem.id;
Query OK, 0 rows affected (0.00 sec)


mysql> SELECT supplier, sum(quantity) 
    -> AS sum FROM jbsale_supply GROUP BY supplier;
+--------------+------+
| supplier     | sum  |
+--------------+------+
| Cannon       |    6 |
| Fisher-Price | NULL |
| Levi-Strauss |    1 |
| Playskool    |    2 |
| White Stag   |    4 |
| Whitman's    |    2 |
+--------------+------+
6 rows in set (0.01 sec)